name: 🚀 CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  NX_CLOUD_DISTRIBUTED_EXECUTION: false

permissions:
  actions: read
  contents: read
  pull-requests: write

jobs:
  # 📦 Install Dependencies (Shared)
  setup:
    name: 📦 Setup & Install
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci

      - name: 💾 Cache node_modules
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            node_modules
            ~/.npm
          key: deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

  # 🏗️ Build, Test & Deploy Setup
  build-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: setup
    env:
      DATABASE_URL: ${{ github.event_name == 'pull_request' && secrets.DEV_DATABASE_URL || secrets.PROD_DATABASE_URL }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔄 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: 🧪 Run tests & type check
        run: npx nx run-many -t test typecheck

      - name: 🗄️ Run database migrations
        run: npm run db:migrate:prod

      - name: 🔨 Build projects
        run: SKIP_ENV_VALIDATION=1 npx nx run-many --target=build --all

  # 🔍 Code Quality & Security
  quality-security:
    name: 🔍 Quality & Security
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔄 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: 🧹 Lint & fix code
        run: npm run lint:fix

      - name: 🛡️ Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

  # 🤖 AI Code Review
  ai-review:
    name: 🤖 Claude Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🤖 Run Claude code review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          direct_prompt: |
            Review this PR for bugs and security issues. Focus on:
            • Security vulnerabilities
            • Logic errors & edge cases  
            • Resource leaks & performance
            • TypeScript/type safety
            
            Be concise. Report only actual issues found.
            If clean, state: "No security issues or bugs detected."

  # ✅ Final Status Check
  status:
    name: ✅ CI Status
    runs-on: ubuntu-latest
    needs: [setup, build-test, quality-security, ai-review]
    if: always()
    steps:
      - name: 📊 Evaluate results
        run: |
          echo "📋 CI Results Summary:"
          echo "Build & Test: ${{ needs.build-test.result }}"
          echo "Quality & Security: ${{ needs.quality-security.result }}"
          echo "Claude Review: ${{ needs.ai-review.result || 'skipped' }}"
          
          # Check for failures
          if [[ "${{ needs.build-test.result }}" != "success" ]]; then
            echo "❌ Build/Test failed"; exit 1
          fi
          if [[ "${{ needs.quality-security.result }}" != "success" ]]; then
            echo "❌ Quality/Security failed"; exit 1
          fi
          if [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ needs.ai-review.result }}" != "success" ]]; then
            echo "❌ AI Review failed"; exit 1
          fi
          
          echo "🎉 All checks passed!"

