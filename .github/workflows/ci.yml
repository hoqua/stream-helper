name: 🚀 CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  NX_CLOUD_DISTRIBUTED_EXECUTION: false

permissions:
  actions: read
  contents: read
  pull-requests: write
  id-token: write

jobs:
  setup:
    name: 📦 Setup & Install
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js & Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci

      - name: 💾 Cache node_modules
        uses: actions/cache/save@v4
        id: cache-deps
        with:
          path: node_modules
          key: deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

  build-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: setup
    env:
      DATABASE_URL: ${{ github.event_name == 'pull_request' && secrets.DEV_DATABASE_URL || secrets.PROD_DATABASE_URL }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔄 Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          fail-on-cache-miss: true

      - name: 🧪 Test & TypeCheck
        run: npx nx run-many -t test typecheck

      - name: 🗄️ Database migrations
        run: npm run db:migrate:prod

      - name: 🔨 Build all projects
        run: SKIP_ENV_VALIDATION=1 npx nx run-many --target=build --all

  quality-security:
    name: 🔍 Quality & Security
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔄 Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          fail-on-cache-miss: true

      - name: 🧹 Lint & fix
        run: npm run lint:fix

      - name: 🛡️ Security audit
        run: npm audit --audit-level=high

  ai-review:
    name: 🤖 Claude Review (Advisory)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    continue-on-error: true
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🤖 AI Code Review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          direct_prompt: |
            Review this PR for bugs and security issues. Focus on:
            • Security vulnerabilities
            • Logic errors & edge cases  
            • Resource leaks & performance
            • TypeScript/type safety

            Be concise. Report only actual issues found.
            If clean, state: "No security issues or bugs detected."

  status:
    name: ✅ CI Status
    runs-on: ubuntu-latest
    needs: [setup, build-test, quality-security]
    if: always()
    steps:
      - name: 📊 Check Results
        run: |
          # Required jobs that must pass
          REQUIRED_JOBS=("setup" "build-test" "quality-security")

          echo "📋 CI Results Summary:"
          echo "Setup: ${{ needs.setup.result }}"
          echo "Build & Test: ${{ needs.build-test.result }}"
          echo "Quality & Security: ${{ needs.quality-security.result }}"
          echo ""

          # Check required jobs
          for job in "${REQUIRED_JOBS[@]}"; do
            case $job in
              "setup")
                if [[ "${{ needs.setup.result }}" != "success" ]]; then
                  echo "❌ Setup failed - dependency installation issues"
                  exit 1
                fi
                ;;
              "build-test")
                if [[ "${{ needs.build-test.result }}" != "success" ]]; then
                  echo "❌ Build/Test failed - code doesn't compile or tests failing"
                  exit 1
                fi
                ;;
              "quality-security")
                if [[ "${{ needs.quality-security.result }}" != "success" ]]; then
                  echo "❌ Quality/Security failed - fix linting and security issues"
                  exit 1
                fi
                ;;
            esac
          done

          echo "🎉 All quality gates passed! Ready to merge."