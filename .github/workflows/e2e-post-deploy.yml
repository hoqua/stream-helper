name: üé≠ E2E Tests (Post-Deploy)

on:
  deployment_status:

env:
  NODE_VERSION: '20'

jobs:
  track-deployments:
    name: üìã Track Deployment Status  
    runs-on: ubuntu-latest
    outputs:
      should-run-e2e: ${{ steps.check-deployments.outputs.should-run-e2e }}
      vercel-url: ${{ steps.check-deployments.outputs.vercel-url }}
      git-sha: ${{ steps.check-deployments.outputs.git-sha }}
      git-ref: ${{ steps.check-deployments.outputs.git-ref }}
    steps:
      - name: üîç Process deployment event
        id: check-deployments
        uses: actions/github-script@v7
        with:
          script: |
            // Only process successful deployments
            if (context.payload.deployment_status.state !== 'success') {
              console.log('‚ùå Deployment not successful, skipping');
              core.setOutput('should-run-e2e', 'false');
              return;
            }
            
            // Determine platform based on deployment details
            const deployment = context.payload.deployment;
            const deploymentUrl = deployment.payload?.web_url || deployment.url;
            
            // Detect platform by URL pattern or other characteristics
            let platform = 'unknown';
            if (deploymentUrl && deploymentUrl.includes('vercel.app')) {
              platform = 'vercel';
            } else if (deploymentUrl && (deploymentUrl.includes('railway.app') || deploymentUrl.includes('up.railway.app'))) {
              platform = 'railway';
            } else {
              // Try to detect by environment or other metadata
              const environment = deployment.environment;
              if (environment === 'Preview' || environment === 'preview') {
                platform = 'vercel';
              } else if (environment === 'production' || deployment.payload?.serviceId) {
                platform = 'railway';
              }
            }
            
            const deploymentInfo = {
              platform: platform,
              url: deploymentUrl,
              sha: deployment.sha,
              ref: deployment.ref,
              environment: deployment.environment,
              creator: deployment.creator?.login,
              id: deployment.id
            };
            
            console.log(`üì¶ Processing ${deploymentInfo.platform} deployment:`, deploymentInfo);
            
            // Find PR for this deployment
            const prNumber = await (async () => {
              try {
                const { data: prs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${deploymentInfo.ref}`,
                  state: 'open'
                });
                return prs.length > 0 ? prs[0].number : null;
              } catch (e) {
                console.log('Could not find PR:', e.message);
                return null;
              }
            })();
            
            if (!prNumber) {
              console.log('‚ùå No open PR found for this deployment');
              core.setOutput('should-run-e2e', 'false');
              return;
            }
            
            // Track deployment status in PR comment
            const deploymentComment = `<!-- DEPLOYMENT_TRACKER_${deploymentInfo.sha} -->`;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const trackerComment = comments.find(c => c.body.includes(`DEPLOYMENT_TRACKER_${deploymentInfo.sha}`));
            let deployments = { vercel: null, railway: null };
            
            if (trackerComment) {
              const match = trackerComment.body.match(/<!-- DEPLOYMENTS: (.+?) -->/);
              if (match) {
                deployments = JSON.parse(match[1]);
              }
            }
            
            // Update deployment status
            if (deploymentInfo.platform === 'vercel') {
              deployments.vercel = {
                url: deploymentInfo.url,
                timestamp: new Date().toISOString()
              };
            } else if (deploymentInfo.platform === 'railway') {
              deployments.railway = {
                environment: deploymentInfo.environment,
                timestamp: new Date().toISOString()
              };
            }
            
            // Create/update tracking comment
            const commentBody = `${deploymentComment}
            üöÄ **Deployment Status**
            
            ${deployments.vercel ? `‚úÖ **Vercel**: ${deployments.vercel.url}` : '‚è≥ **Vercel**: Pending...'}
            ${deployments.railway ? `‚úÖ **Railway**: ${deployments.railway.environment} deployed` : '‚è≥ **Railway**: Pending...'}
            
            ${deployments.vercel && deployments.railway ? 'üé≠ **E2E Tests**: Running against complete deployed stack!' : '‚è≥ **E2E Tests**: Waiting for both deployments...'}
            
            <!-- DEPLOYMENTS: ${JSON.stringify(deployments)} -->`;
            
            if (trackerComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: trackerComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }
            
            // Set outputs
            core.setOutput('git-sha', deploymentInfo.sha);
            core.setOutput('git-ref', deploymentInfo.ref);
            
            if (deployments.vercel && deployments.railway) {
              console.log('üéâ Both deployments complete! Running E2E tests...');
              core.setOutput('should-run-e2e', 'true');
              core.setOutput('vercel-url', deployments.vercel.url);
            } else {
              console.log('‚è≥ Waiting for both deployments to complete...');
              core.setOutput('should-run-e2e', 'false');
            }

  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    needs: track-deployments
    if: needs.track-deployments.outputs.should-run-e2e == 'true'
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.track-deployments.outputs.git-sha }}
          fetch-depth: 0

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üì¶ Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: üéØ Validate deployed stack
        run: |
          VERCEL_URL="${{ needs.track-deployments.outputs.vercel-url }}"
          
          echo "‚úÖ Both deployments confirmed complete!"
          echo "üîç Vercel Gateway: $VERCEL_URL"
          echo "üîç Railway Backend: Deployed and ready"
          
          # Quick validation that the stack is accessible
          echo "üß™ Testing full stack connectivity..."
          if ! curl -f -s -o /dev/null --max-time 15 "$VERCEL_URL/api/hello" 2>/dev/null; then
            echo "‚ùå Stack connectivity test failed"
            echo "üí° Both deployments completed but connectivity issues detected"
            exit 1
          fi
          
          echo "‚úÖ Complete stack validated - running E2E tests!"

      - name: üé≠ Run E2E tests
        run: npx nx e2e web-e2e --verbose
        env:
          PREVIEW_WEB_URL: ${{ needs.track-deployments.outputs.vercel-url }}
          CI: true

      - name: üìä Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ needs.track-deployments.outputs.git-sha }}
          path: apps/web-e2e/playwright-report/
          retention-days: 30

      - name: üìä Upload test results (XML)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ needs.track-deployments.outputs.git-sha }}
          path: apps/web-e2e/test-results/
          retention-days: 30

      - name: üìù Update PR with E2E results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const gitSha = '${{ needs.track-deployments.outputs.git-sha }}';
            const gitRef = '${{ needs.track-deployments.outputs.git-ref }}';
            const deploymentUrl = '${{ needs.track-deployments.outputs.vercel-url }}';
            const success = '${{ job.status }}' === 'success';
            
            // Find the PR
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${gitRef}`,
              state: 'open'
            });

            if (prs.length === 0) return;
            const prNumber = prs[0].number;
            
            // Update the existing deployment tracker comment with E2E results
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const trackerComment = comments.find(c => c.body.includes(`DEPLOYMENT_TRACKER_${gitSha}`));
            
            if (trackerComment) {
              const resultIcon = success ? '‚úÖ' : '‚ùå';
              const resultText = success ? 'Passed' : 'Failed';
              const workflowUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              
              // Update the existing comment to show E2E results
              const updatedBody = trackerComment.body.replace(
                /üé≠ \*\*E2E Tests\*\*:.+/,
                `${resultIcon} **E2E Tests**: ${resultText} ([View Results](${workflowUrl}))`
              );
              
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: trackerComment.id,
                body: updatedBody
              });
            }